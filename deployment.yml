apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  labels:
    app: myapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: main
        image: docker.io/library/myapp:latest
        imagePullPolicy: Never
        env:
          - name: NODE_EXTRA_CA_CERTS
            value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: myapp
  name: myapp
spec:
  ports:
  - nodePort: 30164
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: myapp
  type: NodePort
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: myapp-role
rules:
- apiGroups: ["", "apps"] # "" indicates the core API group
  resources: ["pods", "deployments", "services", "deployment"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: myapp-role-binding
subjects:
- kind: ServiceAccount
  name: default
roleRef:
  kind: Role # This must be Role or ClusterRole
  name: myapp-role
  apiGroup: rbac.authorization.k8s.io
